/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface StockExchangeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyStock"
      | "createStock"
      | "getStockDetails"
      | "getUserPortfolioValue"
      | "stockIndex"
      | "stocks"
      | "userStocks"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "NewStock" | "StockSold"): EventFragment;

  encodeFunctionData(
    functionFragment: "buyStock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createStock",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStockDetails",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPortfolioValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stockIndex", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userStocks",
    values: [AddressLike, string]
  ): string;

  decodeFunctionResult(functionFragment: "buyStock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStockDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPortfolioValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stockIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stocks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userStocks", data: BytesLike): Result;
}

export namespace NewStockEvent {
  export type InputTuple = [
    id: string,
    owner: AddressLike,
    price: BigNumberish,
    quantity: BigNumberish,
    maxPurchaseQuantity: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    owner: string,
    price: bigint,
    quantity: bigint,
    maxPurchaseQuantity: bigint
  ];
  export interface OutputObject {
    id: string;
    owner: string;
    price: bigint;
    quantity: bigint;
    maxPurchaseQuantity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StockSoldEvent {
  export type InputTuple = [
    id: string,
    buyer: AddressLike,
    quantity: BigNumberish,
    totalPrice: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    buyer: string,
    quantity: bigint,
    totalPrice: bigint
  ];
  export interface OutputObject {
    id: string;
    buyer: string;
    quantity: bigint;
    totalPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StockExchange extends BaseContract {
  connect(runner?: ContractRunner | null): StockExchange;
  waitForDeployment(): Promise<this>;

  interface: StockExchangeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyStock: TypedContractMethod<
    [_id: string, _quantity: BigNumberish],
    [void],
    "payable"
  >;

  createStock: TypedContractMethod<
    [
      _id: string,
      _price: BigNumberish,
      _quantity: BigNumberish,
      _maxPurchaseQuantity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getStockDetails: TypedContractMethod<
    [_id: string],
    [
      [bigint, bigint, bigint] & {
        price: bigint;
        quantity: bigint;
        maxPurchaseQuantity: bigint;
      }
    ],
    "view"
  >;

  getUserPortfolioValue: TypedContractMethod<[], [bigint], "view">;

  stockIndex: TypedContractMethod<[arg0: string], [bigint], "view">;

  stocks: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        owner: string;
        id: string;
        price: bigint;
        quantity: bigint;
        maxPurchaseQuantity: bigint;
      }
    ],
    "view"
  >;

  userStocks: TypedContractMethod<
    [arg0: AddressLike, arg1: string],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyStock"
  ): TypedContractMethod<
    [_id: string, _quantity: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createStock"
  ): TypedContractMethod<
    [
      _id: string,
      _price: BigNumberish,
      _quantity: BigNumberish,
      _maxPurchaseQuantity: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getStockDetails"
  ): TypedContractMethod<
    [_id: string],
    [
      [bigint, bigint, bigint] & {
        price: bigint;
        quantity: bigint;
        maxPurchaseQuantity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPortfolioValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stockIndex"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "stocks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint] & {
        owner: string;
        id: string;
        price: bigint;
        quantity: bigint;
        maxPurchaseQuantity: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userStocks"
  ): TypedContractMethod<[arg0: AddressLike, arg1: string], [bigint], "view">;

  getEvent(
    key: "NewStock"
  ): TypedContractEvent<
    NewStockEvent.InputTuple,
    NewStockEvent.OutputTuple,
    NewStockEvent.OutputObject
  >;
  getEvent(
    key: "StockSold"
  ): TypedContractEvent<
    StockSoldEvent.InputTuple,
    StockSoldEvent.OutputTuple,
    StockSoldEvent.OutputObject
  >;

  filters: {
    "NewStock(string,address,uint256,uint256,uint256)": TypedContractEvent<
      NewStockEvent.InputTuple,
      NewStockEvent.OutputTuple,
      NewStockEvent.OutputObject
    >;
    NewStock: TypedContractEvent<
      NewStockEvent.InputTuple,
      NewStockEvent.OutputTuple,
      NewStockEvent.OutputObject
    >;

    "StockSold(string,address,uint256,uint256)": TypedContractEvent<
      StockSoldEvent.InputTuple,
      StockSoldEvent.OutputTuple,
      StockSoldEvent.OutputObject
    >;
    StockSold: TypedContractEvent<
      StockSoldEvent.InputTuple,
      StockSoldEvent.OutputTuple,
      StockSoldEvent.OutputObject
    >;
  };
}
